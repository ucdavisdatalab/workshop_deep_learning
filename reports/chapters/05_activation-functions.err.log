Traceback (most recent call last):
  File "/Users/wbrooks/micromamba/envs/workshop_dl/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/wbrooks/micromamba/envs/workshop_dl/lib/python3.12/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/wbrooks/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/wbrooks/micromamba/envs/workshop_dl/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/wbrooks/micromamba/envs/workshop_dl/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/wbrooks/micromamba/envs/workshop_dl/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/wbrooks/micromamba/envs/workshop_dl/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# instantiate the model
my_nonlin = NonlinearRegressionModel(input_dim=2, hidden_dim=5)

# define the loss function and the optimizer
criterion = torch.nn.MSELoss()
optimizer = torch.optim.Adam(my_nonlin.parameters(), lr=1)

# convert the data to tensors
x_data = torch.tensor(df[['bmi', 's6']].values, dtype=torch.float32)
y_data = torch.tensor(df['target'].values, dtype=torch.float32).unsqueeze(-1)

# train the model by repeatedly making small steps toward the solution
for epoch in range(40000):
    # Forward pass
    y_pred = my_nonlin(x_data)
    
    # Compute and print loss
    loss = criterion(y_pred, y_data)
    if epoch % 1000 == 0:
        print(f'Epoch: {epoch} | Loss: {loss.item()}')
    
    # Zero gradients, perform a backward pass, and update the parameters.
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[3], line 9[0m
[1;32m      6[0m optimizer [38;5;241m=[39m torch[38;5;241m.[39moptim[38;5;241m.[39mAdam(my_nonlin[38;5;241m.[39mparameters(), lr[38;5;241m=[39m[38;5;241m1[39m)
[1;32m      8[0m [38;5;66;03m# convert the data to tensors[39;00m
[0;32m----> 9[0m x_data [38;5;241m=[39m torch[38;5;241m.[39mtensor([43mdf[49m[[[38;5;124m'[39m[38;5;124mbmi[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124ms6[39m[38;5;124m'[39m]][38;5;241m.[39mvalues, dtype[38;5;241m=[39mtorch[38;5;241m.[39mfloat32)
[1;32m     10[0m y_data [38;5;241m=[39m torch[38;5;241m.[39mtensor(df[[38;5;124m'[39m[38;5;124mtarget[39m[38;5;124m'[39m][38;5;241m.[39mvalues, dtype[38;5;241m=[39mtorch[38;5;241m.[39mfloat32)[38;5;241m.[39munsqueeze([38;5;241m-[39m[38;5;241m1[39m)
[1;32m     12[0m [38;5;66;03m# train the model by repeatedly making small steps toward the solution[39;00m

[0;31mNameError[0m: name 'df' is not defined

